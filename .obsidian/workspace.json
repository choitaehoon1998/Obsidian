{
  "main": {
    "id": "0292f5de0726ab99",
    "type": "split",
    "children": [
      {
        "id": "13963d05458e33b5",
        "type": "tabs",
        "children": [
          {
            "id": "cba8feb016da7ad4",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "1.java/book/3. design pattern/팩토리 메서드 (factory method).md",
                "mode": "source",
                "source": false
              }
            }
          }
        ]
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "3ad6f8462c12386a",
    "type": "split",
    "children": [
      {
        "id": "d5e92443c220890a",
        "type": "tabs",
        "children": [
          {
            "id": "3eb4df81238bcd20",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "ad02cd281ab7b134",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "6029810599fff408",
            "type": "leaf",
            "state": {
              "type": "bookmarks",
              "state": {}
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 412.5
  },
  "right": {
    "id": "9536d0916ab74230",
    "type": "split",
    "children": [
      {
        "id": "18e543dda749373c",
        "type": "tabs",
        "children": [
          {
            "id": "94cab8e87ef3038a",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "1.java/book/3. design pattern/팩토리 메서드 (factory method).md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "d9ba5894024fd739",
            "type": "leaf",
            "state": {
              "type": "outgoing-link",
              "state": {
                "file": "1.java/book/3. design pattern/팩토리 메서드 (factory method).md",
                "linksCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "9fc5e2c67e587e2f",
            "type": "leaf",
            "state": {
              "type": "tag",
              "state": {
                "sortOrder": "frequency",
                "useHierarchy": true
              }
            }
          },
          {
            "id": "ea049c5ac99a944f",
            "type": "leaf",
            "state": {
              "type": "outline",
              "state": {
                "file": "1.java/book/3. design pattern/팩토리 메서드 (factory method).md"
              }
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 300,
    "collapsed": true
  },
  "left-ribbon": {
    "hiddenItems": {
      "switcher:퀵 스위처 열기": false,
      "graph:그래프 뷰 열기": false,
      "canvas:새 캔버스 만들기": false,
      "daily-notes:오늘의 데일리 노트 열기": false,
      "templates:템플릿 삽입": false,
      "command-palette:명령어 팔레트 열기": false,
      "obsidian-git:Open Git source control": false
    }
  },
  "active": "cba8feb016da7ad4",
  "lastOpenFiles": [
    "1.java/book/2.effective-java/1. 객체 생성과 파괴/1.생성자 대신 정적 팩터리 메서드를 고려하라(아이템1).md",
    "1.java/book/3. design pattern/팩토리 메서드 (factory method).md",
    "1.java/book/2.effective-java/1. 객체 생성과 파괴/객체생성과파괴-summary.md",
    "1.java/book/3. design pattern/design patten summary.md",
    "1.java/book/3. design pattern/bridge pattern.md",
    "1.java/book/3. design pattern/Flyweight pattern.md",
    "1.java/book/2.effective-java/1. 객체 생성과 파괴/9. try-finally보다는 try-with-resource를 사용하라 (아이템 9).md",
    "1.java/book/2.effective-java/1. 객체 생성과 파괴/8. finalizer와 cleaner 사용을 피하라 (아이템 8).md",
    "1.java/book/2.effective-java/1. 객체 생성과 파괴/7. 다 쓴 객체 참조를 해제하라 (아이템 7).md",
    "1.java/book/2.effective-java/1. 객체 생성과 파괴/6. 불필요한 객체 생성을 피하라 (아이템 6).md",
    "1.java/book/2.effective-java/1. 객체 생성과 파괴/2. 생성자에 매개변수가 많다면 빌더를 고려하라 (아이템 2).md",
    "reflection.md",
    "1.java/book/2.effective-java/3. 클래스와 인터페이스/3. 변경 가능성을 최소화하라 (아이템 17).md",
    "1.java/book/2.effective-java/3. 클래스와 인터페이스/4. 상속보다는 컴포지션을 사용하라 (아이템 18).md",
    "아이템 18.md",
    "1.java/book/2.effective-java/1. 객체 생성과 파괴/4. 인스턴스를 막으려거든 private 생성자를 사용하라 (아이템 4).md",
    "1.java/book/2.effective-java/effective-java-summary.md",
    "1.java/book/2.effective-java/1. 객체 생성과 파괴/5. 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라 (아이템 5).md",
    "1.java/book/2.effective-java/8. 일반적인 프로그래밍 원칙/3. 라이브러리를 익히고 사용하라 (아이템 59).md",
    "1.java/book/2.effective-java/1. 객체 생성과 파괴/3. private 생성자나 열거 타입으로 싱글턴을 보증하라 (아이템 3).md",
    "1.java/book/2.effective-java/5. 열거타입과 애너테이션/1. int 상수 대신 열거 타입을 사용하라 (아이템 34).md",
    "1.java/book/2.effective-java/8. 일반적인 프로그래밍 원칙",
    "1.java/book/2.effective-java/5. 열거타입과 애너테이션/무제 폴더",
    "1.java/book/2.effective-java/5. 열거타입과 애너테이션",
    "1.java/book/2.effective-java/3. 클래스와 인터페이스",
    "whole-summary.md",
    "무제 파일.md",
    "1.java/book/1.god-of-java(자바의신)/god-of-java-summary.md",
    "10.data-pipeline/data-pipeline-summary.md",
    "1.java/book/java- book-summary.md",
    "1.java/book/3. design pattern",
    "1.java/book/2.effective-java/1. 객체 생성과 파괴",
    "2.oop/lecture/2.Pratical-Testing",
    "2.oop/lecture/1.readable-code",
    "2.oop/lecture",
    "7.front-end/1.react"
  ]
}